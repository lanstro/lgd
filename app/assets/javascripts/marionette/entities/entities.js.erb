Lgd.module("Entities", function(Entities, Lgd, Backbone, Marionette, $, _){

	Entities.Container = Backbone.Model.extend ({
		
		strip_number: function(){
			var content = this.get('content');
			if(this.get('level') >= <%= SUBSECTION %> && this.get('level') <= <%= SUBSUBPARAGRAPH %>){
				var close_brace_index = content.indexOf(')');
				return $.trim(content.slice(close_brace_index+1));
			}
			else {
				return content;
			}
		},
		
		initialize: function(){
			this.set('strip_number', this.strip_number());
			var children = this.get("children");
			if(children){
				this.children = new Entities.ContainerCollection(children);
				this.unset("children");
			}
		},
		
		aliases: function(){
			if(this.get('level') >= <%= PARA_LIST_HEAD %>){
				return null;
			}
			var result = [];
			var num = null;
			if(this.get('level') <= <%= SECTION %>){
				num = this.get('number');
			}
			else {
				num = this.subsectionCitation();
			}
			var num_start = /\d/.test(num[0]);
			_.each(<%= STRUCTURAL_ALIASES.values %>[this.get('level')], function(name){
				result.push(name+" "+num);
				if(num_start){
					result.push(name+num);
				}
			});
			result.push(num);
			return result;
		},
		
		parent: function(){
			return Lgd.view.collection.findParent(this);
		},
		
		subsectionCitation: function(current){
			if(typeof(current)==='undefined') current=this;
			if(current.get('level') >= <%= PARA_LIST_HEAD %> || 
				 current.get('level') <  <%= SECTION %> ){
				return null;
			}
			result="";
			while(current.get('level') > <%= SECTION %>) {
				if(current.get('number') != null) {
					result = "("+current.get('number')+")"+result;
				}
				current=current.parent();
			}
			result=current.get('number')+result;
			return result;
		}
	});

	Entities.ContainerCollection = Backbone.Collection.extend({
		model: Entities.Container,
		comparator: 'position',
		initialize: function(){
			this.url=$('.legislation').data('legislation_id')+'/containers_json.json';
		},
		
	});
	
	var act;
	
	var initialize=function(){
		if(act===undefined)
			act = new Entities.ContainerCollection();
	};
	
	var API = {
		getAct: function(){
			if(act===undefined){
				initialize();
			}
			return act;
		},
	};
	
	Lgd.reqres.setHandler("Act", function(){
		return API.getAct();
	});
	
	
});