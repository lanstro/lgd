// TODO medium -
// admin hide/delete posts
// spinner while comments being posted
// validate that text is not empty and not >5000 characters
// reload panel when new posts successful
// icons replacing navigation tabs
// close tab
// subtitle for the right panel indicating which section/part it's attached to
// editing comment

// TODO medium:
// since these sets of views are a hierarchy, consider keeping pointers in each of these objects to:
// the root container; and
// all of the views above it in the hierarchy

Lgd.module('Secondary', function(Secondary, Lgd, Backbone, Marionette, $, _){
	Secondary.Layout = Marionette.LayoutView.extend({
		template: JST['marionette/templates/secondary/secondary_layout'],
		
		regions: {
			body:        "#secondary_body"
		},
		
		className: "fixed secondary_container",

		initialize: function(args){
			this.container_id = args.container_id;
			this.container_citation = args.container_citation;
			
		},
		
		events: {
			"click .secondary_nav"   : "navClicked",
		},
		
		navClicked: function(element){
			switch(element.currentTarget.id){
				case "secondary_nav_comments":
					this.showComments();
					break;
				case "secondary_nav_history":
					this.showHistory();
					
					break;
				case "secondary_nav_exceptions":
					this.showExceptions();
					
					break;
				case "secondary_nav_admin":
					this.showAdmin();
					
					break;
				case "secondary_nav_close":
					this.close();
					
					break;
			}
			return false;
		},
		
		onRender: function(){
			//console.log("secondary body is rendering");
			//console.log("id is "+this.container_id);
			this.showComments();
			// TODO LOW - consider making proper entity for this
			var citation = this.container_citation
			if(!citation)
				citation="paragraph, container_id "+this.container_id
			this.$('.secondary_title').text("Additional information for "+citation);
		},
		
		showComments: function(){
			var secondaryView = new Secondary.CommentsLayout({
				"container_id": this.container_id
			});
			this.body.show(secondaryView);
			return false;
		},
		
		showHistory: function(){
			console.log("nav history clicked");
			var secondaryView = new Secondary.HistoryView({
				"container_id": this.container_id
			});
			this.body.show(secondaryView);
			return false;
		},
		
		showExceptions: function(){
			console.log("exceptions clicked");
			var secondaryView = new Secondary.ExceptionsView({
				"container_id": this.container_id
			});
			// TODO LOW - store user's preference for which sub-window to show
			this.body.show(secondaryView);
			return false;
		},
		
		showAdmin: function(){
			console.log("admin clicked");
			var secondaryView = new Secondary.AdminView({
				"container_id": this.container_id
			});
			// TODO LOW - store user's preference for which sub-window to show
			this.body.show(secondaryView);
			return false;
		},
		
		close: function(){
			console.log("close clicked");
			// shut down all ckeditor instances
			return false;
		}
		
		
	});

/* *********************************************************
   *                                                       *	
   *          Comments views                               *
   *                                                       *
   *********************************************************  */

	Secondary.CommentsLayout = Marionette.LayoutView.extend({
		template: JST['marionette/templates/secondary/comments_layout'],
		
		regions: {
			comments:        "#secondary_comments",
			form:            "#secondary_new_thread_form"
		},
		
		events: {
			"click a.new_thread": "showForm"
		},
		
		showForm: function(event){
			event.stopImmediatePropagation();
			event.preventDefault();
			var col = this.commentsCollection;
			var newComment = new Lgd.Entities.Comment({
				container_id: 		this.container_id,
				parent_id:    		null,
			});
			newComment.url = col.url;
			newComment.parentCollection = col;
			newComment.secondaryLayout = this;
			
			var commentsForm = new Secondary.CommentsForm({model: newComment, templateData: {new_thread: true}});
			
			this.form.show(commentsForm);
			this.$('textarea').ckeditor();
			return false;
		},
		
		
		showReplyButton: function(){
			var commentsButton = new Secondary.NewThreadButton();
			this.form.show(commentsButton);
			return false;
		},
		
		onRender: function(){
			
			this.commentsCollection = new Lgd.Entities.CommentsCollection();
			this.commentsCollection.url = $('#legislation_main').data('legislation_id')+'/containers/'+this.container_id+'/comments';
			this.commentsCollection.fetch();
			
			var commentsView        = new Secondary.CommentsRootView({collection: this.commentsCollection});
			
			this.commentsCollection.once('sync', function(){
				// console.log("Comments layout has detected end of fetch for comments collection, and would now like to render.");
				this.comments.show(commentsView);
			}, this);
			
			this.showReplyButton();
			
		},
		initialize: function(args){
			this.container_id = args.container_id
		}
	});

	
	Secondary.Comment = Marionette.CompositeView.extend({

		template: JST['marionette/templates/secondary/comment'],
		tagName: 'div',
		className: function(){
			var result = "well";
			if(this.model.get('ancestry_depth') > 0)
				result+=" replies";
			return result;
		},
		initialize: function(){
			this.collection     = this.model.children;
			if(this.collection)
				this.collection.url = this.model.collection.url;
			this.model.set({"showForm": false});
		},
		
		events: {
			"click a.comment_reply": "replyClicked"
		},
		
		replyClicked: function(event){
			event.stopImmediatePropagation();
			event.preventDefault();
			var col = this.model.children;
			var newComment = new Lgd.Entities.Comment({
				container_id: 		this.model.get('container_id'),
				parent_id:    		this.model.get('id'),
			});
			newComment.url = this.model.collection.url;
			// console.log("new comment's url is ")
			// console.log(newComment.url);
			newComment.parentCollection = col;
			newComment.originalView = this;
			
			var commentsForm = new Secondary.CommentsForm({model: newComment, templateData: {new_thread: false}});
			// console.log(newComment);
			this.$el.children('.comment_reply').after(commentsForm.render().el);
			this.$el.children('.comment_reply').remove();
			this.$('textarea').ckeditor();
			return false;
		},
	});
	
	
	Secondary.CommentsRootView = Marionette.CollectionView.extend({
		template:           JST['marionette/templates/secondary/comment_root'],
		childView:          Secondary.Comment,
		childViewContainer: 'div',
	});
	
	Secondary.CommentsForm = Backbone.Form.extend({
		template: JST['marionette/templates/secondary/comments_form'],
		events: {
			"click input": "postComment"
		},
		postComment: function(event){
			event.stopImmediatePropagation();
			event.preventDefault();
			// add validations (ie not zero length)
			// console.log("Posting new comment thread...");
			this.commit();
			
			var newComment = this.model;
			// console.log(newComment);
			newComment.save(null, {
				success: function(args){
					if(args.attributes.success){
						//console.log("success");
						//console.log(args);
						newComment.set(args.attributes.user_id);
						newComment.set(args.attributes.created_at);
						newComment.set(args.attributes.id);
						//console.log(newComment.attributes);
						//console.log("Finding right CKEDITOR instance");
						var todestroy=CKEDITOR.instances[newComment.cid+"_content"];
						//console.log("all CKEDITOR instances:");
						//console.log(CKEDITOR.instances);
						//console.log("Destroying this ckeditor instance: ");
						//console.log(todestroy);
						todestroy.destroy();
						if(newComment.get('parent_id')){
							//console.log("not a new thread");
							// add new comment to appropriate collection
							// re-render the original replied-to comment
							//console.log("original comment's children: ");
							//console.log(newComment.parentCollection);
							if(newComment.parentCollection)
								newComment.parentCollection.add(newComment);
							else
								newComment.originalView.model.children = new Lgd.Entities.CommentsCollection(newComment);
							newComment.originalView.render();
							//console.log("original comment's children now:");
							//console.log(newComment.originalView.model.children);
						}
						else {
							newComment.parentCollection.add(newComment);
							newComment.secondaryLayout.showReplyButton();
						}
					}
					else {
						// TODO Medium: finish this, add validations
						//console.log("failed");
						//console.log(args);
					}
				}
			});
			return false;
		}
	});
	
	Secondary.NewThreadButton = Marionette.ItemView.extend({
		template: _.template('<a class="new_thread" href="#">Start a new comment thread!</a>'),
		// TODO MEDIUM - check whether user logged in when they do this
	});
	
	
/* *********************************************************
   *                                                       *	
   *          Admin views                                  *
   *                                                       *
   ********************************************************* */
	
	// TODO HIGH: lock this to admins only
	
	Secondary.AdminView=Marionette.LayoutView.extend({
	
		template: JST['marionette/templates/secondary/admin_layout'],
		
		regions: {
			form:        "#secondary_admin_form"
		},
		
		events: {
			"click #secondary_select_container": "select_container",
			"click #secondary_edit_container":  "edit_current_container",
			"click #secondary_new_metadata":    "new_metadata",
			"click #secondary_edit_metadata":   "edit_metadata",
			"click #secondary_new_annotation":  "new_annotation",
			"click #secondary_edit_annotation": "edit_annotations"
		},
		
		select_container: function(event){
			event.stopImmediatePropagation();
			event.preventDefault();
		},
		
		edit_current_container: function(event){
			event.stopImmediatePropagation();
			event.preventDefault();
			console.log("edit container clicked");
			
			var model = Lgd.request("ContainerViews").findByCustom(this.container_id).model;
			
			var containerForm = new Secondary.ContainerForm({model: model});
			this.form.show(containerForm);
			return false;
		},
		
		new_metadata: function(event){
			event.stopImmediatePropagation();
			event.preventDefault();
			console.log("new metadata clicked");
			var newMeta = new Lgd.Entities.Meta({content_id: this.container_id, content_type: "Container"});
			newMeta.url =  $('#legislation_main').data('legislation_id')+'/containers/'+this.container_id+'/metadata';
			var metaForm = new Secondary.MetadatumForm({model: newMeta});
			this.form.show(metaForm);
			return false;
			// need a selection system for picking which contents and scopes to link to
		},
		edit_metadata: function(event){
			// need selection system
			event.stopImmediatePropagation();
			event.preventDefault();
			console.log("edit metadata clicked");
			this.showMetadataList();
			var region=this.form;
			Lgd.on("metadatum:editClicked", function(metadatum){
				console.log(metadatum);
				console.log(this);
				var metadatumForm = new Secondary.MetadatumForm({model: metadatum});
				region.show(metadatumForm);
			},this);
			
			Lgd.on("metadatum:returnToList", function(){
				this.showMetadataList();
			}, this);		
			return false;
			
		},
		
		showMetadataList: function(){
			var metadata = new Lgd.Entities.MetadatumCollection();
			metadata.url = $('#legislation_main').data('legislation_id')+'/containers/'+this.container_id+'/metadata';
			var region=this.form;
			metadata.fetch({
				success: function(){
					var metadataView = new Secondary.MetadatumCollectionView({ collection: metadata });
					region.show(metadataView);
				}
			});
		},

		new_annotation: function(event){
			event.stopImmediatePropagation();
			event.preventDefault();
			console.log("new annotation clicked");
			var newAnnotation = new Lgd.Entities.Annotation({container_id: this.container_id});
			newAnnotation.url =  $('#legislation_main').data('legislation_id')+'/containers/'+this.container_id+'/annotations';
			var annotationForm = new Secondary.AnnotationForm({model: newAnnotation});
			this.form.show(annotationForm);
			return false;
			// need a selection system for picking which metadata to link to
		},
		edit_annotations: function(event){
			event.stopImmediatePropagation();
			event.preventDefault();
			console.log("edit annotation clicked");
			
			this.showAnnotationsList();
			var region=this.form;
			Lgd.on("annotation:editClicked", function(annotation){
				console.log(annotation);
				console.log(this);
				var annotationForm = new Secondary.AnnotationForm({model: annotation});
				region.show(annotationForm);
			},this);
			
			Lgd.on("annotation:returnToList", function(){
				this.showAnnotationsList();
			}, this);		
			return false;
		},
		showAnnotationsList: function(){
			var annotations = new Lgd.Entities.AnnotationCollection();
			annotations.url = $('#legislation_main').data('legislation_id')+'/containers/'+this.container_id+'/annotations';
			var region=this.form;
			annotations.fetch({
				success: function(){
					var annotationsView = new Secondary.AnnotationCollectionView({ collection: annotations });
					region.show(annotationsView);
				}
			});
		},
		
		initialize: function(args){
			this.container_id = args.container_id;
		},
		
	});
	
	Secondary.ContainerForm = Backbone.Form.extend({
		template: JST['marionette/templates/secondary/container_form'],
		events: {
			"click input.submit": "updateContainer"
		},
		updateContainer: function(event){
			event.stopImmediatePropagation();
			event.preventDefault();
			// add validations
			console.log("Updating container");
			this.commit();
			
			this.model.save(null, {
				success: function(args){
					if(args.attributes.success){
						// TODO MEDIUM:
						// - select other containers for edit
						// - progressive loading, so that we have better url paths for these models
						// - hover for showing what container number everything is
						// update the model with what was sent back
						// if parentage was changed, re-render the relevant bits
						// update the main view if required
						// update this form
						// inform user that update went through
					}
					else {
						// TODO Medium: finish this, add validations
						//console.log("failed");
						//console.log(args);
					}
				}
			});
			return false;
		}
	});
	
	Secondary.MetadatumListItem = Marionette.ItemView.extend({

		template: JST['marionette/templates/secondary/metadatum_list_item'],
		tagName: 'tr',
		events: {
			"click": "metadatumSelected"
		},
		metadatumSelected: function(event){
			event.stopImmediatePropagation();
			event.preventDefault();
			console.log("Metadatum clicked: "+this.model.get("anchor"));
			Lgd.trigger("metadatum:editClicked", this.model);
		}
	});
	
	Secondary.MetadatumCollectionView = Marionette.CompositeView.extend({
		template:           JST['marionette/templates/secondary/metadatum_collection'],
		childView:          Secondary.MetadatumListItem,
		childViewContainer: 'tbody'
	});
	
	Secondary.MetadatumForm = Backbone.Form.extend({
		template: JST['marionette/templates/secondary/metadata_form'],
		events: {
			"click input.submit": "updateMetadatum"
		},
		updateMetadatum: function(event){
			event.stopImmediatePropagation();
			event.preventDefault();
			// add validations
			console.log("Updating metadatum");
			this.commit();
			this.model.save(null, {
				success: function(args){
					if(args.attributes.success){
						Lgd.trigger("metadatum:returnToList");
						console.log("successfully saved metadatum update");
						// inform user that update went through
						// reload main view?
					}
					else {
						// TODO Medium: finish this, add validations
						console.log("failed");
						console.log(args);
					}
				}
			});
			return false;
		}
	});
	
	Secondary.AnnotationListItem = Marionette.ItemView.extend({

		template: JST['marionette/templates/secondary/annotation_list_item'],
		tagName: 'tr',
		events: {
			"click": "annotationSelected"
		},
		annotationSelected: function(event){
			event.stopImmediatePropagation();
			event.preventDefault();
			console.log("Annotation clicked: "+this.model.get("anchor"));
			Lgd.trigger("annotation:editClicked", this.model);
		}
	});
	
	Secondary.AnnotationCollectionView = Marionette.CompositeView.extend({
		template:           JST['marionette/templates/secondary/annotation_collection'],
		childView:          Secondary.AnnotationListItem,
		childViewContainer: 'tbody',
	});
	
	Secondary.AnnotationForm = Backbone.Form.extend({
		template: JST['marionette/templates/secondary/annotation_form'],
		events: {
			"click input.submit": "updateAnnotation"
		},
		updateAnnotation: function(event){
			event.stopImmediatePropagation();
			event.preventDefault();
			// add validations
			console.log("Updating annotation");
			this.commit();
			this.model.save(null, {
				success: function(args){
					if(args.attributes.success){
						Lgd.trigger("annotation:returnToList");
						// inform user that update went through
						// reload main view?
					}
					else {
						// TODO Medium: finish this, add validations
						//console.log("failed");
						//console.log(args);
					}
				}
			});
			return false;
		}
	});
	
	Secondary.ExceptionsView = Marionette.ItemView.extend({
		template: JST['marionette/templates/secondary/exceptions_layout'],
	});
	
	Secondary.HistoryView = Marionette.ItemView.extend({
		template: JST['marionette/templates/secondary/history_layout'],
	});
});